generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* -------------------- ENUMS -------------------- */

enum UserRole {
  CUSTOMER @map("customer")
  ADMIN    @map("admin")
}

enum OrderStatus {
  PLACED    @map("placed")
  SHIPPED   @map("shipped")
  DELIVERED @map("delivered")
  CANCELLED @map("cancelled")
}

enum OrderPaymentStatus {
  PENDING  @map("pending")
  PAID     @map("paid")
  FAILED   @map("failed")
  REFUNDED @map("refunded")
}

enum PaymentStatus {
  SUCCESS @map("success")
  FAILED  @map("failed")
  PENDING @map("pending")
}

/* -------------------- MODELS -------------------- */

model User {
  id           String    @id @default(uuid())
  name         String
  email        String    @unique
  passwordHash String
  role         UserRole  @default(CUSTOMER)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  addresses    Address[]
  carts        Cart[]
  orders       Order[]
  reviews      Review[]
}

model Address {
  id          String   @id @default(uuid())
  userId      String
  line1       String
  line2       String?
  city        String
  state       String
  country     String
  postalCode  String
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
  orders      Order[]
}

model Category {
  id        String      @id @default(uuid())
  name      String
  parentId  String?
  createdAt DateTime     @default(now())

  parent    Category?   @relation("CategoryParent", fields: [parentId], references: [id])
  children  Category[]  @relation("CategoryParent")
  products  Product[]
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String
  price       Decimal     @db.Decimal(10,2)
  stock       Int
  categoryId  String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  category    Category?   @relation(fields: [categoryId], references: [id])
  images      ProductImage[]
  reviews     Review[]
  orderItems  OrderItem[]
  cartItems   CartItem[]
}

model ProductImage {
  id         String   @id @default(uuid())
  url        String
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
}

model Cart {
  id        String     @id @default(uuid())
  userId    String
  createdAt DateTime    @default(now())

  user      User        @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int       @default(1)
  price     Decimal   @db.Decimal(10,2)

  cart      Cart      @relation(fields: [cartId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])
}

model Order {
  id            String             @id @default(uuid())
  userId        String
  addressId     String?
  totalAmount   Decimal             @db.Decimal(10,2)
  paymentStatus OrderPaymentStatus  @default(PENDING)
  orderStatus   OrderStatus         @default(PLACED)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  user          User                @relation(fields: [userId], references: [id])
  address       Address?            @relation(fields: [addressId], references: [id])
  items         OrderItem[]
  payment       Payment?
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal   @db.Decimal(10,2)

  order     Order     @relation(fields: [orderId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])
}

model Payment {
  id        String          @id @default(uuid())
  orderId   String          @unique
  provider  String
  amount    Decimal          @db.Decimal(10,2)
  status    PaymentStatus    @default(PENDING)
  createdAt DateTime         @default(now())

  order     Order            @relation(fields: [orderId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  productId String
  userId    String
  rating    Int
  comment   String
  createdAt DateTime @default(now())

  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}
