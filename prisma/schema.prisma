generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* ---------- ENUMS ---------- */

enum user_role {
  customer
  admin
}

enum order_status {
  placed
  shipped
  delivered
  cancelled
}

enum order_payment_status {
  pending
  paid
  failed
  refunded
}

enum payment_status {
  pending
  success
  failed
}

/* ---------- MODELS ---------- */

model users {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  password_hash String
  role          user_role @default(customer)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  addresses     addresses[]
  carts         carts[]
  orders        orders[]
  reviews       reviews[]
}

model addresses {
  id           String   @id @default(uuid())
  user_id      String
  line1        String
  line2        String?
  city         String
  state        String
  country      String
  postal_code  String
  created_at   DateTime @default(now())

  user         users    @relation(fields: [user_id], references: [id])
  orders       orders[]
}

model categories {
  id         String      @id @default(uuid())
  name       String
  parent_id  String?
  created_at DateTime     @default(now())

  parent     categories?  @relation("CategoryParent", fields: [parent_id], references: [id])
  children   categories[] @relation("CategoryParent")
  products   products[]
}

model products {
  id          String         @id @default(uuid())
  name        String
  description String
  price       Decimal         @db.Decimal(10,2)
  stock       Int
  category_id String?
  created_at  DateTime        @default(now())
  updated_at  DateTime        @updatedAt

  category    categories?     @relation(fields: [category_id], references: [id])
  images      product_images[]
  reviews     reviews[]
  order_items order_items[]
  cart_items  cart_items[]
}

model product_images {
  id          String   @id @default(uuid())
  url         String
  product_id  String
  product     products @relation(fields: [product_id], references: [id])
}

model carts {
  id         String      @id @default(uuid())
  user_id    String
  created_at DateTime     @default(now())

  user       users        @relation(fields: [user_id], references: [id])
  items      cart_items[]
}

model cart_items {
  id         String   @id @default(uuid())
  cart_id    String
  product_id String
  quantity   Int       @default(1)
  price      Decimal   @db.Decimal(10,2)

  cart       carts     @relation(fields: [cart_id], references: [id])
  product    products  @relation(fields: [product_id], references: [id])
}

model orders {
  id              String              @id @default(uuid())
  user_id         String
  address_id      String?
  total_amount    Decimal              @db.Decimal(10,2)
  payment_status  order_payment_status @default(pending)
  order_status    order_status         @default(placed)
  created_at      DateTime             @default(now())
  updated_at      DateTime             @updatedAt

  user            users                @relation(fields: [user_id], references: [id])
  address         addresses?           @relation(fields: [address_id], references: [id])
  items           order_items[]
  payment         payments?
}

model order_items {
  id         String   @id @default(uuid())
  order_id   String
  product_id String
  quantity   Int
  price      Decimal   @db.Decimal(10,2)

  order      orders    @relation(fields: [order_id], references: [id])
  product    products  @relation(fields: [product_id], references: [id])
}

model payments {
  id         String          @id @default(uuid())
  order_id   String          @unique
  provider   String
  amount     Decimal          @db.Decimal(10,2)
  status     payment_status   @default(pending)
  created_at DateTime         @default(now())

  order      orders           @relation(fields: [order_id], references: [id])
}

model reviews {
  id         String   @id @default(uuid())
  product_id String
  user_id    String
  rating     Int
  comment    String
  created_at DateTime @default(now())

  product    products @relation(fields: [product_id], references: [id])
  user       users    @relation(fields: [user_id], references: [id])
}